# -*- coding: utf-8 -*-
"""Regresja_liniowa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12aHF-8k2FKf3Uh2BL8VQ4E3s_Tv06kX-
"""

import sys
import pandas as pandas
import matplotlib.pyplot as plt
import numpy as np
import statsmodels.api as statmodel
from sklearn.linear_model import LinearRegression
from scipy import stats
from statsmodels.stats import stattools

#Zadanie1. Wczytaj plik piwo.csv
piwo=pandas.read_csv("./piwo.csv")

#Zadanie2. Wykonaj wykres rozrzutu
plt.figure(figsize=(10,8))
plt.title('Wykres rozrzutu')
plt.plot("alkohol", "kalorie", data=piwo, linestyle='none', marker='*')
plt.ylabel('ilość jednostek kalorii', horizontalalignment='center')
plt.xlabel('ilość alkoholu', horizontalalignment='center')
plt.show()

R = np.corrcoef(piwo["alkohol"],piwo["kalorie"])[1][0]
print("Współczynnik korelacji: \t",R)
print("Kwadrat współczynnika korelacji:", pow(R, 2))

#Zadanie3 Budowa modelu 
model = LinearRegression()
model.fit(piwo[["alkohol"]],piwo["kalorie"], sample_weight=None)
print('b1: ', model.coef_[0])
print('b0: ', model.intercept_)

predict = model.predict(piwo[["alkohol"]])
piwo["reszty"] = piwo["kalorie"] - predict
fig = plt.figure(figsize=(8,6))
plt.title('Histogram reszt')
plt.xlabel('reszty')
plt.hist(piwo["reszty"], color = "green", edgecolor='black', bins=[-10, -8, -6,  -4, -2, 0, 2, 4], linewidth=1.5);
plt.show()

plt.title('Zależność kaloryczności piwa od zawartości alkoholu.')
plt.xlabel('zawartosc alkoholu')
plt.ylabel('kalorycznosc')
plt.scatter(piwo["alkohol"], piwo["kalorie"], color = 'green')
plt.plot(piwo["alkohol"], predict, color = 'red')
plt.show()

statmodel.qqplot(piwo["reszty"],color = "green", line='45',fit=True)
plt.title('Wykres kwantyl-kwantyl')
plt.show()

reszty_norm=(piwo["reszty"]-piwo["reszty"].min())/(piwo["reszty"].max()-piwo["reszty"].min())
predict_norm=(predict-predict.min())/(predict.max()-predict.min())
plt.title("Wykres zaleznosci")
plt.xlabel('Standaryzowane wartości przewidywane')
plt.ylabel('Standaryzowane reszty')
plt.scatter(predict_norm, reszty_norm, color = 'green')
plt.show()

#Zadanie5 - Oddzielanie piw light
piwo["light"] = np.where(piwo["alkohol"] <= 4.3, 1, 0)

#Test Shapiro-Wilka
stat= stats.shapiro(piwo["reszty"])
print('Statystyka=%.3f, p-wartosc=%.6f' % (stat[0], stat[1]))
if stat[1] > 0.05:
	print('P-wartosc jest wieksza niz poziom istotnosci')
else:
	print('P-wartosc jest mniejsza niz poziom istotnosci')

#Test Dubrina-Watsona
#niestety nie znalazlem sposobu na uzyskanie p-wartosci testem Dubrina-Watsona
DubrinWatson = stattools.durbin_watson(piwo["reszty"])
print('\nDurbin-Watson stat: %.3f' %(DubrinWatson))

#Zadanie6 - osobna budowa modelu dla piw light i normalnych
light = piwo[piwo["light"] == 1]
light_model = LinearRegression()
light_model.fit(light[["alkohol"]],light["kalorie"], sample_weight=None)
predict_light = light_model.predict(light[["alkohol"]])
R = np.corrcoef(light["alkohol"],light["kalorie"])[1][0]
print("Piwa light: ")
print("Współczynnik korelacji: \t",R)
print("Kwadrat współczynnika korelacji:", pow(R, 2))
print('b1: ', light_model.coef_[0])
print('b0: ', light_model.intercept_)

normal = piwo[piwo["light"] == 0]
normal_model = LinearRegression()
normal_model.fit(normal[["alkohol"]],normal["kalorie"], sample_weight=None)
predict_normal = normal_model.predict(normal[["alkohol"]])
R = np.corrcoef(normal["alkohol"],normal["kalorie"])[1][0]
print("Piwa normalne: ")
print("Współczynnik korelacji: \t",R)
print("Kwadrat współczynnika korelacji:", pow(R, 2))
print('b1: ', normal_model.coef_[0])
print('b0: ', normal_model.intercept_)

fig = plt.figure(figsize=(6,4))
plt.hist(light["reszty"], color = "green", edgecolor='black', bins=[-10, -8, -6,  -4, -2, 0, 2, 5], linewidth=1.5);
plt.title('Histogram reszt dla piw light')
plt.xlabel('reszty')
plt.show()

fig = plt.figure()
plt.hist(normal["reszty"], color = "green", edgecolor='black', bins=[-5, -4, -2, 0, 2, 5], linewidth=1.5);
plt.title('Histogram reszt dla piw normalnych')
plt.xlabel('reszty')
plt.show()

plt.title('Zależność kaloryczności piwa light od zawartości alkoholu')
plt.xlabel('zawartosc alkoholu')
plt.ylabel('kalorycznosc')
plt.scatter(light["alkohol"], light["kalorie"], color = 'green')
plt.plot(light["alkohol"], predict_light, color = 'red')
plt.show()


plt.title('Zależność kaloryczności piwa normalnego od zawartości alkoholu')
plt.xlabel('zawartosc alkoholu')
plt.ylabel('kalorycznosc')
plt.scatter(normal["alkohol"], normal["kalorie"], color = 'green')
plt.plot(normal["alkohol"], predict_normal, color = 'red')
plt.show()

statmodel.qqplot(light["reszty"],color = "green", line='45',fit=True)
plt.title('Wykres kwantyl-kwantyl piw light')
plt.show()

statmodel.qqplot(normal["reszty"],color = "green", line='45',fit=True)
plt.title('Wykres kwantyl-kwantyl piw normalnych')
plt.show()

reszty_ligh_norm=(light["reszty"]-light["reszty"].min())/(light["reszty"].max()-light["reszty"].min())
predict_light_norm=(predict_light-predict_light.min())/(predict_light.max()-predict_light.min())
plt.title("Wykres zaleznosci piw light")
plt.xlabel('Standaryzowane wartości przewidywane')
plt.ylabel('Standaryzowane reszty')
plt.scatter(predict_light_norm, reszty_ligh_norm, color = 'green')
plt.show()

reszty_normal_norm=(normal["reszty"]-normal["reszty"].min())/(normal["reszty"].max()-normal["reszty"].min())
predict_normal_norm=(predict_normal-predict_normal.min())/(predict_normal.max()-predict_normal.min())
plt.title("Wykres zaleznosci piw light")
plt.xlabel('Standaryzowane wartości przewidywane')
plt.ylabel('Standaryzowane reszty')
plt.scatter(predict_normal_norm, reszty_normal_norm, color = 'green')
plt.show()

#Test Shapiro-Wilka dla piw light]
print("PIWA LIGHT")
stat_light= stats.shapiro(light["reszty"])
print('Statystyka=%.3f, p-wartosc=%.6f' % (stat_light[0], stat_light[1]))
if stat_light[1] > 0.05:
	print('P-wartosc jest wieksza niz poziom istotnosci')
else:
	print('P-wartosc jest mniejsza niz poziom istotnosci')

#Test Dubrina-Watsona
DubrinWatson = stattools.durbin_watson(light["reszty"])
print('Durbin-Watson stat: %.3f' %(DubrinWatson)) 

print("\nPIWA NORMALNE")
stat_normal= stats.shapiro(normal["reszty"])
print('Statystyka=%.3f, p-wartosc=%.6f' % (stat_normal[0], stat_normal[1]))
if stat_normal[1] > 0.05:
	print('P-wartosc jest wieksza niz poziom istotnosci')
else:
	print('P-wartosc jest mniejsza niz poziom istotnosci')

#Test Dubrina-Watsona
DubrinWatson = stattools.durbin_watson(normal["reszty"])
print('Durbin-Watson stat: %.3f' %(DubrinWatson))

#Zadanie 7 - zastosowanie modelu na "wlasnych" piwach
nowe_piwa = np.array([2.0,3.5,4.0,5.5,6.0])
nowe_piwa = pd.DataFrame(data=nowe_piwa, columns=["alkohol"])
nowe_piwa["predict"] = model.predict(nowe_piwa)
nowe_piwa